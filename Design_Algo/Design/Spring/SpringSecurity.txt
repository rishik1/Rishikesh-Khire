Application level security

Allow Bloc URL
Acces control to user and certain roles
Handle venurabilities

Username/password authentication
SSO/Okta/LDAP => part of the organization DAP , System Admin control access to LDAP db
App lvel Authorization
Intra App Authorization like oAuth
Microservices security using tokens JWT
Method level security

Authentication
Authorization

Knowledge Base authentication ::  password pincode simple
Possesion Based authentication :: Phone/text messages
Combinationof both is called multi factire authentication

Authorization : Can this user be allowed for function
should does user be allowed to do something

Principal currently logged in User : app remebers user for logged in User

how the Authorization happens
bunch of permission is called authority : granted authority , Access Control fine grained permission
Default response for granted authority is none

Role : Group of authority
Assign a Role
Roles are Coarse gained permission how fine grained permssion are  < Granted authority vs Roles >


Dependency
spring-boot-starter-security

=> spring-boot-starter-security just add yo pom.xml it starts working
=> Filters comes free with spring security
=> Filter works with servelts 
=> Intercept every request cross cutting functionality to all servelts
=> bunch of filters can be added to examin all request
=> Mandatory require all the URL
=> Adds a login form
=> Handles login errors
=> default userId and password // in the console logs
=> create my own user Id and password
=> customize by configuration in application.properties
=> In application.properties
spring.security.user.password=foo
spring.securrity.user.password=foopass


Override Authentication in spring security

Configure Authetication Manager builder 
Authentication manager {
    authenticate();
}


I want in ememory authentication ==> use Authentication Manager using builder 

=>Leveraging a Hook in Spring security
=>create new AuthenticationManagerBuilder 
=>and pass to hook in spring security ==> configure(AuthenticationManagerBuilder);
==> Never store password as clear text 
==> Store password in ecoded password
==> password are store in Hashed String
==> password encoding 
==> expose @Bean of PasswordEncoder

@EnableWebSecurity
public class SecurityConfiguration extends webSecurityConfigureAdapter{

    @Override
    protected void configure(AuthenticationManagerBuilder auth) throws Exception{
        //in memeory authentication
        auth.inMemeoryAuthentication()
        .withUser("blah")
        .password("blah")
        .roles("USER")
        .and()
        .withUser("admin")
        .pasword("adminPassowrd")
        .roles("ADMIN");

    }

    @Bean
    public PasswordEncoder getPasswordEncoder(){
        return NoOpPasswordEncoder.getInstance(); // standarPasswordEncoder or BCryptPasswordEncoder
    }

    @Override
    protected void configure(HttpSecurity http) throws Exception{
        /*http.authorizedRequest()
        .antMatcher("*/**").hasRole("ADMIN")  // antMatcher(*/**) ==> matches all least restrictive
        .and().formLogin();
        */

        http.authorizedRequest()
            .antMatcher(*/admin).hasRole("ADMIN")
            .antMatcher(*/user").hasRole("USER")
            .antMatcher("/").permitAll()
            .and().formLogin();


    }
}




Configure HttpSecurity
webSecurityConfigureAdapter builder also accepts HttpSecurity


public interfcae AuthenticationProvider{
    authenticate(Authentication authentication)
}

//Same authentication object is used for both principal and request
Interface Authentication{

    Object getCredentials();

    boolean isAuthenticated();

    Object getPrincipal();

}

AuthenticationProvider return Principal information about current authenticated user

you can have multiple AuthenticationProviders
like LDAP , oAuth , PasswordAuthentication


Coordinate multiple AuthenticationManager

providerManger implements AuthenticationManager --> deligates to right providerManger
each authenticationProvider needs to implements 

boolean supports(Authentication authentication)   in provider implements

access Identity Store all provider do how you use user password

UserDetailsService
loadUserByUserName()





