Micro service needs to be fault tolereant and resilent

How Much a system can handle fault tolernace?
Fall back mechanism


Issues with microservices
1) instance go down : Run multiple instance 

REST response
 500 internal server error ,
 503 service unavailable ,
 400 Bad request
 401 Unauthrozied
 403 forbidden  ==> user may not have permissions
 404 Not found
 405 Method not allowed , like read only resource can only allow GET ,POST methos but no PUT DELETE methods
 405 Not Acceptable : media type is inccorect
 412 Pre condition failed : Client specified pre condition did not met so 412
 415 Unsupported Media Type : application/xml may not be supported only supports application/json

 300 Multiple choice
 301 MoVe Permenatly :  should specify the new URI in the response’s Location header
 302 found : Found is a common way of performing URL redirection.  URL in the Location header field
 303 see other :it sends the client the URI of a response resource instead of resource itself
 304 Not modified : is used when the resource has not been modified since the version specified by the request headers If-Modified-Since or If-None-Match.
 307 Temperory redirect

 200 OK
 201 Created
 202 Accepted : Async processing of the data
 204 No Content : PUT, POST, or DELETE REST API declines to send back any status message or representation in the response message’s body.



 => Ribbon load balance client side : Round robbing balancing

2) Micro service is being slow problem 
=> everything becomes slow
=> timeouts and service availabilty issue
=> if sevrer is having more threads request than server can handle ==> Denial of service attack
=> Use configurable timeouts to avoid DDOS and check request source

=> timeout on spring Rest template
HttpComponentsClientHttpRequestFactory clientHttpRequestFactory = new HttpComponentsClientHttpRequestFactory();
clientHttpRequestFactory.setConnectTimeout(3000); //in ms
RestTemplate restTemplate = new RestTemplate(clientHttpRequestFactory);

CIRCUIT BREAKER Design pattern :
=> Detect is the timeout is happening , give it time to recovery and then send request
=> temprory avoid situtation getting worse by timeout
=> take a break
=> deactive problem componenet and does'nt effec the downstream componenet
=> detect faults => break temproryly => reset and turn on automatically
=> can technically lead to consumption of resources


what is trigger for Circuit breaker ??
=> cannot rely on just 1 timeout and break.
=> at any point last n reuest timeout , circiut breaker will kick in but not smart enough
=> Need to know paramter to break the Circuit
=> check last n request
=> how many of last n request are failing
=> time out duration : mark it as failure after timeout seconds
=> When does circuit gets back to normal
=> how long to wait before circuit needs to break

example
last nrequest to consider for the decision : 5
How many oof those shoudl fail : 3
Timeout duration: 2s
How long to wait  (sleep windows) : 10s


Fallback Mechansim : 
1) throw an error lasy resort
2) fallback default response 
3) save previous reponses in (cache) and use that whe possible => end user wont get sensible response

circuit Breaker is needed because
1) fail fast is good resilence
2) fallback functionality
3) automatic recovery


==> when to break the circut 
Netfix : HYSTRIX is framework for CIRCUIT BREAKER
=> open source library
=> already implements circuit breaker pattern
=> not actively being maintained

# spring-cloud-starter-netflix-hytrix //dependency

# @EnabledCircuitBreaker on the class

# @HystrixCommand to methods that need circuit breakers

# Configure Hystrix breaker parameter bheavior


@HystrixCommand(fallbackMethod ="getFallbackCatalog")
fallback when circuits breakers   ==> needs to be simple hard coded reponses otherwise fallback will require fallback

how is Hystrix implemented
=>proxy class wraps the original class which needs circuits breaker , This proxy class will hav fallback implementation
when circuit breaker is activated and other configuration parameters


=> Hystrix needs to be at granular level fallbacks for circuit breaker , so partial reponse can be used
=> Methods within the same class Hytrix will not work it has to be in another class or bean (original method under consideration and the fallback method).

@HystrixCommand(fallbackMethod="getFallbackUserRating" ,
commandProperties={
    @HystrixProperty(name = "execution.isolationthread.timeoutInMsmvalue ="2000").
    @HystrixProperty(name = "circuitBreaker.requestVolumeThreshold",value="5"),
    @HystrixProperty(name = "circuitBreaker.errorThreshold", value ="50"),
    @HystrixProperty(name = "circuitBreaker.sleepWindowInMs", value="5000")
})



=> you can add HYSTRIX DASHBOARD for monitoring 
=> add maven dependency for HYSTRIX dashboard binaries in POM.xml
=> @EnableHystrixDashboard
=> mmanagement.endpoints.we.exposure.include=hystrix.stream
==> https://localhost:8081/hystrix



BULKHEAD pattern
# ship building 
# Holes at the bottom of ship to avoid ship going down
# using BulkHead pattern while building microservices
# decoupling 1 method from another method
# seperate threadpool resource for different isolated point of failures

@HystrixCommand(fallbackMethod="getFallbackUserRating" ,
                threadpoolkey = "movieInfoPool",
                threadpoolProperties ={
                    @HystrixProperty(name ="coreSise", value ="20")
                    @HystrixProperty(name ="maxQueueSize", value ="10")
                },
commandProperties={
    @HystrixProperty(name = "execution.isolationthread.timeoutInMsmvalue ="2000").
    @HystrixProperty(name = "circuitBreaker.requestVolumeThreshold",value="5"),
    @HystrixProperty(name = "circuitBreaker.errorThreshold", value ="50"),
    @HystrixProperty(name = "circuitBreaker.sleepWindowInMs", value="5000")
})




+++++++++ microservices configuration ++++++++++
Seperation of code and config
Easily changeable values
Databse connections in configuration server
credentials in configuration server
Feature getFallbackUserRatingBusiness logic configuration
Scenario testing => traffic re routing 10% , 20% , 30%
Spring Boot configuration ==> Hytrix connection timeout


















